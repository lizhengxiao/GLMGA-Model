tau <- exp(pars[lengthpar+1])
#ll <- -0.5*log(2) - log(sigma) + 0.5*log(b) - lbeta(0.5, 0.5) - (1/(2*sigma)+1)*log(y) - (0.5 + 0.5)*log(0.5*(1/y)^(1/sigma) + b)
ll <- 0.5*log(tau) - 0.5*log(2*pi) - log(sigma) - (1/(2*sigma) + 1)*log(y) - tau/2*(1/y)^(1/sigma)
loglike <- -sum(ll)
return(loglike)
}
mlogmoyal <- optim(fn = LLlogmoyal, X = X,
par = c(0.1, 0.3, 0.1, 0.1),
y = y, hessian = T)
modout(mlogmoyal)
mlogmoyal
pars <- mlogmoyal$par
lengthpar <- dim(X)[2]
sigma <- exp(X %*% pars[1:lengthpar])
tau <- exp(pars[lengthpar+1])
ufit <- c()
for(i in 1:length(y)){
ufit[i] <- pGlogM(y[i], sigma = sigma[i], tau = tau)
}
resGlogM <- qnorm(ufit)
qqnorm(resGlogM)
abline(0, 1, col = 'blue')
# 1.9 exponentiated Frechet regression -------------------------------------------------------------
LLeFrechet <- function(y, pars, X) {
lengthpar <- dim(X)[2]
lambda <- exp(X %*% pars[1:lengthpar])
tau <- exp(pars[lengthpar+1])
alpha <- exp(pars[lengthpar+2])
ll <- log(alpha) + log(tau) + log(lambda) + (alpha - 1)*log(1 - exp(-tau/y^lambda)) - (1+lambda)*log(y) - tau/y^lambda
loglike <- -sum(ll)
return(loglike)
}
meFrechet <- optim(fn = LLeFrechet, X = X,
#par = rep(times = (dim(X)[2]+2), x = -1),
par = c(-0.8,-0.2,0.1,2.5,0),
control = list(maxit = 50000),
y = y, hessian = T)
modout(meFrechet)
meFrechet
pars <- meFrechet$par
lengthpar <- dim(X)[2]
lambda <- exp(X %*% pars[1:lengthpar])
tau <- exp(pars[lengthpar+1])
alpha <- exp(pars[lengthpar+2])
ufit <- c()
peFrechet <- function(y, lambda, tau, alpha){
sigma <- tau^(1/lambda)
1 - (1 - exp(-(sigma/y)^lambda))^alpha
}
for(i in 1:length(y)){
ufit[i] <- peFrechet(y[i], lambda = lambda[i], tau = tau, alpha = alpha)
}
ufit
reseFrechet <- qnorm(ufit)
qqnorm(reseFrechet)
abline(0, 1, col = 'blue')
# 2.0 burr regression -------------------------------------------------------------
LLburr <- function(y, pars, X) {
lengthpar <- dim(X)[2]
tau <- exp(X %*% pars[1:lengthpar])
lambda <- exp(pars[lengthpar+1])
beta <- exp(pars[lengthpar+2])
ll <- log(lambda) + lambda*log(beta) + log(tau) + (tau-1)*log(y) - (lambda+1)*log(beta+y^tau)
loglike <- -sum(ll)
return(loglike)
}
mburr <- optim(fn = LLburr, X = X,
#par = rep(times = (dim(X)[2]+2), x = 0.1),
par = c(2, -1, -1, -1, 5),
y = y, hessian = T)
modout(mburr)
mburr
pars <- mburr$par
lengthpar <- dim(X)[2]
tau <- exp(X %*% pars[1:lengthpar])
lambda <- exp(pars[lengthpar+1])
beta <- exp(pars[lengthpar+2])
ufit <- c()
pburrnew <- function(y, lambda, beta, tau){1 - (beta/(beta+y^tau))^lambda}
for(i in 1:length(y)){
ufit[i] <- pburrnew(y[i], lambda = lambda, tau = tau[i], beta = beta)
}
resburr <- qnorm(ufit)
qqnorm(resburr)
abline(0, 1, col = 'blue')
# 2.1 gamma-generalized inverse gaussian regression -------------------------------------------------------------
pars <- rep(times = (dim(X)[2] + 4), x = -1)
LLGAGIG <- function(y, pars, X) {
lengthpar <- dim(X)[2]
t <- exp(X %*% pars[1:lengthpar])
a <- exp(pars[lengthpar+1])
lambda <- exp(pars[lengthpar+2])
mu <- exp(pars[lengthpar+3])
phi <- exp(pars[lengthpar+4])
munew <- mu*sqrt(phi/(phi+2*mu^2*t*y))
K1 <- besselK(x = phi/munew, nu = (a+lambda))
K2 <- besselK(x = phi/mu, nu = (lambda))
ll <- a*(log(y) + log(t) + log(mu)) - log(y) - lgamma(a) + (a+lambda)/2*(log(phi) - log(phi+2*mu^2*t*y)) + log(K1) - log(K2)
loglike <- -sum(ll)
return(loglike)
}
mGAGIG <- optim(fn = LLGAGIG, X = X,
#par = c(1,-1,-1,1,-1,1,1),
par = c(1, -1,-1,1,-1,2,2),
control = list(maxit = 50000),
y = y, hessian = T)
modout(mGAGIG)
mGAGIG
pars <- mGAGIG$par
lengthpar <- dim(X)[2]
t <- exp(X %*% pars[1:lengthpar])
a <- exp(pars[lengthpar+1])
lambda <- exp(pars[lengthpar+2])
mu <- exp(pars[lengthpar+3])
phi <- exp(pars[lengthpar+4])
pGAGIG <- function(y, t, a, lambda, mu){
pGAGIG <- function(y, t , a, lambda, mu){
munew <- mu*sqrt(phi/(phi+2*mu^2*t*y))
K1 <- besselK(x = phi/munew, nu = (a+lambda))
K2 <- besselK(x = phi/mu, nu = (lambda))
ll <- a*(log(y) + log(t) + log(mu)) - log(y) - lgamma(a) + (a+lambda)/2*(log(phi) - log(phi+2*mu^2*t*y)) + log(K1) - log(K2)
exp(ll)
}
z <- c()
for (i in 1:length(y)){
pnew <- function(y){
pGAGIG(y, t = t[i], a = a, lambda = lambda, mu = mu)
}
z[i] = integrate(pnew, lower = 0, upper = y[i])$value
}
z
}
ufit <- c()
ufit <- pGAGIG(y = y, t = t, a = a, lambda = lambda, mu = mu)
resGAGIG <- qnorm(ufit)
qqnorm(resGAGIG)
abline(0, 1, col = 'blue')
# 2.2 gamma regression distribution -------------------------------------------------------------
LLgamma <- function(y, pars, X) {
lengthpar <- dim(X)[2]
mu <- exp(X %*% pars[1:lengthpar])
sigma <- exp(pars[lengthpar+1])
ll <- dGA(y, mu = mu, sigma = sigma, log = T)
loglike <- -sum(ll)
return(loglike)
}
mgamma <- optim(fn = LLgamma, X = X,
par = rep(times = (dim(X)[2]+1), x = 1),
#par = c(-2,-1,-1,1,-1,2,2),
control = list(maxit = 50000),
y = y, hessian = T)
modout(mgamma)
mgamma
pars <- mgamma$par
lengthpar <- dim(X)[2]
mu <- exp(X %*% pars[1:lengthpar])
sigma <- exp(pars[lengthpar+1])
ufit <- c()
ufit <- pGA(y, mu = mu, sigma = sigma)
resgamma <- qnorm(ufit)
qqnorm(resgamma)
abline(0, 1, col = 'blue')
# 2.2 inverse guaissn regression distribution -------------------------------------------------------------
LLigua <- function(y, pars, X) {
lengthpar <- dim(X)[2]
mu <- exp(X %*% pars[1:lengthpar])
sigma <- exp(pars[lengthpar+1])
ll <- dIG(y, mu = mu, sigma = sigma, log = T)
loglike <- -sum(ll)
return(loglike)
}
migua <- optim(fn = LLigua, X = X,
#par = rep(times = (dim(X)[2]+1), x = 0.1),
par = c(-5,1,1,1),
control = list(maxit = 50000),
y = y, hessian = T)
modout(migua)
migua
pars <- migua$par
lengthpar <- dim(X)[2]
mu <- exp(X %*% pars[1:lengthpar])
sigma <- exp(pars[lengthpar+1])
ufit <- c()
ufit <- pIG(y, mu = mu, sigma = sigma)
resigua <- qnorm(ufit)
qqnorm(resigua)
abline(0, 1, col = 'blue')
# 2.3 exp - inverse guaissn regression distribution -------------------------------------------------------------
LLexpigua <- function(y, pars, X) {
lengthpar <- dim(X)[2]
t <- exp(X %*% pars[1:lengthpar])
delta <- exp(pars[lengthpar+1])
phi <- (delta^2+2*y/t)^(0.5)
ll <- log(delta)-log(t)-delta*phi-delta^2-3*log(phi)+log(delta*phi+1)
loglike <- -sum(ll)
return(loglike)
}
mexpigua <- optim(fn = LLexpigua, X = X,
#par = rep(times = (dim(X)[2]+1), x = 0.1),
par = c(-1,1,1,1),
control = list(maxit = 50000),
y = y, hessian = T)
modout(mexpigua)
mexpigua
pexpigua <- function(y, delta, t){
phi <- (delta^2+2*y/t)^(0.5)
1 - delta*exp(-delta*(phi-delta))/phi
}
pars <- mexpigua$par
lengthpar <- dim(X)[2]
t <- exp(X %*% pars[1:lengthpar])
delta <- exp(pars[lengthpar+1])
phi <- (delta^2+2*y/t)^(0.5)
ufit <- c()
ufit <- pexpigua(y, delta = delta, t = t)
resexpigua <- qnorm(ufit)
qqnorm(resexpigua)
abline(0, 1, col = 'blue')
# 结果比较 -------------------------------------------------------------
npars.com <- rbind(nrow(modout(mllognormal)$summary),
nrow(modout(mlweibull)$summary),
nrow(modout(mlGB2)$summary),
nrow(modout(mlogmoyalGA)$summary),
nrow(modout(mlogmoyalGA2)$summary),
nrow(modout(mlogmoyalGA3)$summary),
nrow(modout(mlogmoyal)$summary),
nrow(modout(meFrechet)$summary),
nrow(modout(mburr)$summary),
nrow(modout(mGAGIG)$summary),
nrow(modout(mgamma)$summary),
nrow(modout(migua)$summary),
nrow(modout(mexpigua)$summary),
nrow(modout(mlGPD)$summary),
nrow(modout(mGB2s)$summary),
nrow(modout(mlGB2.sigma)$summary),
nrow(modout(mlGB2.nu)$summary),
nrow(modout(mlGB2.tau)$summary))
# 结果比较 -------------------------------------------------------------
npars.com <- rbind(nrow(modout(mllognormal)$summary),
nrow(modout(mlweibull)$summary),
nrow(modout(mlGB2)$summary),
nrow(modout(mlogmoyalGA)$summary),
nrow(modout(mlogmoyalGA2)$summary),
nrow(modout(mlogmoyalGA3)$summary),
nrow(modout(mlogmoyal)$summary),
nrow(modout(meFrechet)$summary),
nrow(modout(mburr)$summary),
nrow(modout(mGAGIG)$summary),
nrow(modout(mgamma)$summary),
nrow(modout(migua)$summary),
nrow(modout(mexpigua)$summary),
nrow(modout(mlGPD)$summary),
nrow(modout(mlGB2.sigma)$summary),
nrow(modout(mlGB2.nu)$summary),
nrow(modout(mlGB2.tau)$summary))
loglike.com <- rbind(modout(mllognormal)$ll,
modout(mlweibull)$ll,
modout(mlGB2)$ll,
modout(mlogmoyalGA)$ll,
modout(mlogmoyalGA2)$ll,
modout(mlogmoyalGA3)$ll,
modout(mlogmoyal)$ll,
modout(meFrechet)$ll,
modout(mburr)$ll,
modout(mGAGIG)$ll,
modout(mgamma)$ll,
modout(migua)$ll,
modout(mexpigua)$ll,
modout(mlGPD)$ll,
modout(mlGB2.sigma)$ll,
modout(mlGB2.nu)$ll,
modout(mlGB2.tau)$ll)
AIC.com <- rbind(modout(mllognormal)$AIC,
modout(mlweibull)$AIC,
modout(mlGB2)$AIC,
modout(mlogmoyalGA)$AIC,
modout(mlogmoyalGA2)$AIC,
modout(mlogmoyalGA3)$AIC,
modout(mlogmoyal)$AIC,
modout(meFrechet)$AIC,
modout(mburr)$AIC,
modout(mGAGIG)$AIC,
modout(mgamma)$AIC,
modout(migua)$AIC,
modout(mexpigua)$AIC,
modout(mlGPD)$AIC,
modout(mlGB2.sigma)$AIC,
modout(mlGB2.nu)$AIC,
modout(mlGB2.tau)$AIC)
BIC.com <- rbind(modout(mllognormal)$BIC,
modout(mlweibull)$BIC,
modout(mlGB2)$BIC,
modout(mlogmoyalGA)$BIC,
modout(mlogmoyalGA2)$BIC,
modout(mlogmoyalGA3)$BIC,
modout(mlogmoyal)$BIC,
modout(meFrechet)$BIC,
modout(mburr)$BIC,
modout(mGAGIG)$BIC,
modout(mgamma)$BIC,
modout(migua)$BIC,
modout(mexpigua)$BIC,
modout(mlGPD)$BIC,
modout(mlGB2.sigma)$BIC,
modout(mlGB2.nu)$BIC,
modout(mlGB2.tau)$BIC)
convergence.com <- rbind((mllognormal)$convergence,
(mlweibull)$convergence,
(mlGB2)$convergence,
(mlogmoyalGA)$convergence,
(mlogmoyalGA2)$convergence,
(mlogmoyalGA3)$convergence,
(mlogmoyal)$convergence,
(meFrechet)$convergence,
(mburr)$convergence,
(mGAGIG)$convergence,
(mgamma)$convergence,
(migua)$convergence,
(mexpigua)$convergence,
(mlGPD)$convergence,
(mlGB2.sigma)$convergence,
(mlGB2.nu)$convergence,
(mlGB2.tau)$convergence)
convergence.com
# 结果比较 -------------------------------------------------------------
npars.com <- rbind(nrow(modout(mllognormal)$summary),
nrow(modout(mlweibull)$summary),
nrow(modout(mlGB2)$summary),
nrow(modout(mlogmoyalGA)$summary),
nrow(modout(mlogmoyalGA2)$summary),
nrow(modout(mlogmoyalGA3)$summary),
nrow(modout(mlogmoyal)$summary),
nrow(modout(meFrechet)$summary),
nrow(modout(mburr)$summary),
nrow(modout(mGAGIG)$summary),
nrow(modout(mgamma)$summary),
nrow(modout(migua)$summary),
nrow(modout(mexpigua)$summary),
nrow(modout(mlGPD)$summary),
nrow(modout(mlGB2.sigma)$summary),
nrow(modout(mlGB2.nu)$summary),
nrow(modout(mlGB2.tau)$summary))
loglike.com <- rbind(modout(mllognormal)$ll,
modout(mlweibull)$ll,
modout(mlGB2)$ll,
modout(mlogmoyalGA)$ll,
modout(mlogmoyalGA2)$ll,
modout(mlogmoyalGA3)$ll,
modout(mlogmoyal)$ll,
modout(meFrechet)$ll,
modout(mburr)$ll,
modout(mGAGIG)$ll,
modout(mgamma)$ll,
modout(migua)$ll,
modout(mexpigua)$ll,
modout(mlGPD)$ll,
modout(mlGB2.sigma)$ll,
modout(mlGB2.nu)$ll,
modout(mlGB2.tau)$ll)
AIC.com <- rbind(modout(mllognormal)$AIC,
modout(mlweibull)$AIC,
modout(mlGB2)$AIC,
modout(mlogmoyalGA)$AIC,
modout(mlogmoyalGA2)$AIC,
modout(mlogmoyalGA3)$AIC,
modout(mlogmoyal)$AIC,
modout(meFrechet)$AIC,
modout(mburr)$AIC,
modout(mGAGIG)$AIC,
modout(mgamma)$AIC,
modout(migua)$AIC,
modout(mexpigua)$AIC,
modout(mlGPD)$AIC,
modout(mlGB2.sigma)$AIC,
modout(mlGB2.nu)$AIC,
modout(mlGB2.tau)$AIC)
BIC.com <- rbind(modout(mllognormal)$BIC,
modout(mlweibull)$BIC,
modout(mlGB2)$BIC,
modout(mlogmoyalGA)$BIC,
modout(mlogmoyalGA2)$BIC,
modout(mlogmoyalGA3)$BIC,
modout(mlogmoyal)$BIC,
modout(meFrechet)$BIC,
modout(mburr)$BIC,
modout(mGAGIG)$BIC,
modout(mgamma)$BIC,
modout(migua)$BIC,
modout(mexpigua)$BIC,
modout(mlGPD)$BIC,
modout(mlGB2.sigma)$BIC,
modout(mlGB2.nu)$BIC,
modout(mlGB2.tau)$BIC)
convergence.com <- rbind((mllognormal)$convergence,
(mlweibull)$convergence,
(mlGB2)$convergence,
(mlogmoyalGA)$convergence,
(mlogmoyalGA2)$convergence,
(mlogmoyalGA3)$convergence,
(mlogmoyal)$convergence,
(meFrechet)$convergence,
(mburr)$convergence,
(mGAGIG)$convergence,
(mgamma)$convergence,
(migua)$convergence,
(mexpigua)$convergence,
(mlGPD)$convergence,
(mlGB2.sigma)$convergence,
(mlGB2.nu)$convergence,
(mlGB2.tau)$convergence)
row.names(AIC.com) <- c('lognormal', 'weibull', 'GB2',
'logmoyalGA','logmoyalGA2','logmoyalGA3',
'GlogM', 'eFrechet', 'burr', 'GAGIG',
'gamma', 'ig', 'expigua', 'GP',
'GB2.sigma','GB2.nu','GB2.tau')
row.names(BIC.com) <- c('lognormal', 'weibull', 'GB2',
'logmoyalGA','logmoyalGA2','logmoyalGA3',
'GlogM', 'eFrechet', 'burr', 'GAGIG',
'gamma', 'ig', 'expigua', 'GP',
'GB2.sigma','GB2.nu','GB2.tau')
colnames(AIC.com) <- 'AIC'
colnames(BIC.com) <- 'BIC'
colnames(loglike.com) <- 'loglike'
colnames(npars.com) <- 'npars'
outtable <- round(cbind(npars.com, loglike.com, AIC.com, BIC.com), 1)
outtable <- round(cbind(npars.com, loglike.com, AIC.com, BIC.com), 1)
outtable
outtable[order(outtable[,3], decreasing = F),]  # AIC sorting
outtable[order(outtable[,4], decreasing = F),]  # BIC sorting
est.table <- cbind(
rbind(as.matrix(modout(mllognormal)$summary), matrix(NA, nrow = 7-nrow(modout(mllognormal)$summary), ncol = 4)),
rbind(as.matrix(modout(mlpareto)$summary), matrix(NA, nrow = 7-nrow(modout(mlpareto)$summary), ncol = 4)),
rbind(as.matrix(modout(mlweibull)$summary), matrix(NA, nrow = 7-nrow(modout(mlweibull)$summary), ncol = 4)),
rbind(as.matrix(modout(mlGB2)$summary), matrix(NA, nrow = 7-nrow(modout(mlGB2)$summary), ncol = 4)),
rbind(as.matrix(modout(mlogmoyalGA)$summary), matrix(NA, nrow = 7-nrow(modout(mlogmoyalGA)$summary), ncol = 4)),
rbind(as.matrix(modout(mlogmoyalGA2)$summary), matrix(NA, nrow = 7-nrow(modout(mlogmoyalGA2)$summary), ncol = 4)),
rbind(as.matrix(modout(mlogmoyalGA3)$summary), matrix(NA, nrow = 7-nrow(modout(mlogmoyalGA3)$summary), ncol = 4)),
rbind(as.matrix(modout(mlogmoyal)$summary), matrix(NA, nrow = 7-nrow(modout(mlogmoyal)$summary), ncol = 4)),
rbind(as.matrix(modout(meFrechet)$summary), matrix(NA, nrow = 7-nrow(modout(meFrechet)$summary), ncol = 4)),
rbind(as.matrix(modout(mburr)$summary), matrix(NA, nrow = 7-nrow(modout(mburr)$summary), ncol = 4)),
rbind(as.matrix(modout(mGAGIG)$summary), matrix(NA, nrow = 7-nrow(modout(mGAGIG)$summary), ncol = 4))
)
# QQ - plot
par(mfrow = c(2, 2))
q1 <- qqnorm(resLMGA, main = 'GLMGA I', xlim = c(-3, 3), ylim = c(-3, 3))
abline(0, 1, col = 'red')
q2 <- qqnorm(resLMGA2, main = 'GLMGA II', xlim = c(-3, 3), ylim = c(-3, 3))
abline(0, 1, col = 'red')
q3 <- qqnorm(resLMGA3, main = 'GLMGA III', xlim = c(-3, 3), ylim = c(-3, 3))
abline(0, 1, col = 'red')
q4 <- qqnorm(resGB2, main = 'GB2', xlim = c(-3, 3), ylim = c(-3, 3))
abline(0, 1, col = 'red')
cor(q1$data, q1$qnorm); # GLMGA I
cor(q2$data, q2$qnorm); # GLMGA II
cor(q3$data, q3$qnorm); # GLMGA III
cor(q4$data, q4$qnorm); # GB2
# QQ - plot
par(mfrow = c(4, 3))
qqnorm(reslognormal, main = 'lognormal', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(respareto, main = 'pareto', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resweibull, main = 'weibull', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resGB2, main = 'GB2', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resLMGA, main = 'logmoyal-gamma', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resLMGA2, main = 'logmoyal-gamma2', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resLMGA3, main = 'logmoyal-gamma3', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resGlogM, main = 'logmoyal', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(reseFrechet, main = 'eFrechet', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resburr, main = 'burr', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resGAGIG, main = 'GAGIG', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resGB2.sigma, main = 'GB2.sigma', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
# QQ - plot
par(mfrow = c(2, 2))
qqnorm(resLMGA, main = 'GLMGA I', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resLMGA2, main = 'GLMGA II', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resLMGA3, main = 'GLMGA III', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resGB2, main = 'GB2', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
# QQ - plot
par(mfrow = c(2, 2))
qqnorm(resLMGA, main = 'GLMGA I', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resLMGA2, main = 'GLMGA II', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resLMGA3, main = 'GLMGA III', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resGB2, main = 'GB2', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
# QQ - plot
par(mfrow = c(2, 2))
qqnorm(resLMGA, main = 'GLMGA I', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resLMGA2, main = 'GLMGA II', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resLMGA3, main = 'GLMGA III', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
qqnorm(resGB2, main = 'GB2', xlim = c(-4, 4), ylim = c(-4, 4))
abline(0, 1, col = 'red')
